# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.38
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        try:
            fp, pathname, description = imp.find_module('_libtype', [dirname(__file__)])
            _mod = imp.load_module('_libtype', fp, pathname, description)
        finally:
            if fp is not None: fp.close()
        return _mod
    _libtype = swig_import_helper()
    del swig_import_helper
else:
    import _libtype
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _libtype.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _libtype.SwigPyIterator_value(self)
    def incr(self, n = 1): return _libtype.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _libtype.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _libtype.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _libtype.SwigPyIterator_equal(self, *args)
    def copy(self): return _libtype.SwigPyIterator_copy(self)
    def next(self): return _libtype.SwigPyIterator_next(self)
    def __next__(self): return _libtype.SwigPyIterator___next__(self)
    def previous(self): return _libtype.SwigPyIterator_previous(self)
    def advance(self, *args): return _libtype.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _libtype.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _libtype.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _libtype.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _libtype.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _libtype.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _libtype.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _libtype.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class s_ull(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, s_ull, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, s_ull, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ull"] = _libtype.s_ull_ull_set
    __swig_getmethods__["ull"] = _libtype.s_ull_ull_get
    if _newclass:ull = _swig_property(_libtype.s_ull_ull_get, _libtype.s_ull_ull_set)
    __swig_getmethods__["u"] = _libtype.s_ull_u_get
    if _newclass:u = _swig_property(_libtype.s_ull_u_get)
    def __init__(self): 
        this = _libtype.new_s_ull()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libtype.delete_s_ull
    __del__ = lambda self : None;
s_ull_swigregister = _libtype.s_ull_swigregister
s_ull_swigregister(s_ull)

class s_ull_u(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, s_ull_u, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, s_ull_u, name)
    __repr__ = _swig_repr
    __swig_setmethods__["Low"] = _libtype.s_ull_u_Low_set
    __swig_getmethods__["Low"] = _libtype.s_ull_u_Low_get
    if _newclass:Low = _swig_property(_libtype.s_ull_u_Low_get, _libtype.s_ull_u_Low_set)
    __swig_setmethods__["High"] = _libtype.s_ull_u_High_set
    __swig_getmethods__["High"] = _libtype.s_ull_u_High_get
    if _newclass:High = _swig_property(_libtype.s_ull_u_High_get, _libtype.s_ull_u_High_set)
    def __init__(self): 
        this = _libtype.new_s_ull_u()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libtype.delete_s_ull_u
    __del__ = lambda self : None;
s_ull_u_swigregister = _libtype.s_ull_u_swigregister
s_ull_u_swigregister(s_ull_u)

class Path(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Path, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Path, name)
    __repr__ = _swig_repr
    __swig_setmethods__["path"] = _libtype.Path_path_set
    __swig_getmethods__["path"] = _libtype.Path_path_get
    if _newclass:path = _swig_property(_libtype.Path_path_get, _libtype.Path_path_set)
    def __init__(self, *args): 
        this = _libtype.new_Path(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libtype.delete_Path
    __del__ = lambda self : None;
Path_swigregister = _libtype.Path_swigregister
Path_swigregister(Path)

class vtime(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vtime, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vtime, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _libtype.delete_vtime
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _libtype.new_vtime(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["year"] = _libtype.vtime_year_set
    __swig_getmethods__["year"] = _libtype.vtime_year_get
    if _newclass:year = _swig_property(_libtype.vtime_year_get, _libtype.vtime_year_set)
    __swig_setmethods__["month"] = _libtype.vtime_month_set
    __swig_getmethods__["month"] = _libtype.vtime_month_get
    if _newclass:month = _swig_property(_libtype.vtime_month_get, _libtype.vtime_month_set)
    __swig_setmethods__["day"] = _libtype.vtime_day_set
    __swig_getmethods__["day"] = _libtype.vtime_day_get
    if _newclass:day = _swig_property(_libtype.vtime_day_get, _libtype.vtime_day_set)
    __swig_setmethods__["hour"] = _libtype.vtime_hour_set
    __swig_getmethods__["hour"] = _libtype.vtime_hour_get
    if _newclass:hour = _swig_property(_libtype.vtime_hour_get, _libtype.vtime_hour_set)
    __swig_setmethods__["minute"] = _libtype.vtime_minute_set
    __swig_getmethods__["minute"] = _libtype.vtime_minute_get
    if _newclass:minute = _swig_property(_libtype.vtime_minute_get, _libtype.vtime_minute_set)
    __swig_setmethods__["second"] = _libtype.vtime_second_set
    __swig_getmethods__["second"] = _libtype.vtime_second_get
    if _newclass:second = _swig_property(_libtype.vtime_second_get, _libtype.vtime_second_set)
    __swig_setmethods__["usecond"] = _libtype.vtime_usecond_set
    __swig_getmethods__["usecond"] = _libtype.vtime_usecond_get
    if _newclass:usecond = _swig_property(_libtype.vtime_usecond_get, _libtype.vtime_usecond_set)
    __swig_setmethods__["wday"] = _libtype.vtime_wday_set
    __swig_getmethods__["wday"] = _libtype.vtime_wday_get
    if _newclass:wday = _swig_property(_libtype.vtime_wday_get, _libtype.vtime_wday_set)
    __swig_setmethods__["yday"] = _libtype.vtime_yday_set
    __swig_getmethods__["yday"] = _libtype.vtime_yday_get
    if _newclass:yday = _swig_property(_libtype.vtime_yday_get, _libtype.vtime_yday_set)
    __swig_setmethods__["dst"] = _libtype.vtime_dst_set
    __swig_getmethods__["dst"] = _libtype.vtime_dst_get
    if _newclass:dst = _swig_property(_libtype.vtime_dst_get, _libtype.vtime_dst_set)
    def get_time(self, *args): return _libtype.vtime_get_time(self, *args)
vtime_swigregister = _libtype.vtime_swigregister
vtime_swigregister(vtime)

class Handle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Handle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Handle, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libtype.new_Handle(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["id"] = _libtype.Handle_id_set
    __swig_getmethods__["id"] = _libtype.Handle_id_get
    if _newclass:id = _swig_property(_libtype.Handle_id_get, _libtype.Handle_id_set)
    __swig_setmethods__["name"] = _libtype.Handle_name_set
    __swig_getmethods__["name"] = _libtype.Handle_name_get
    if _newclass:name = _swig_property(_libtype.Handle_name_get, _libtype.Handle_name_set)
    __swig_destroy__ = _libtype.delete_Handle
    __del__ = lambda self : None;
Handle_swigregister = _libtype.Handle_swigregister
Handle_swigregister(Handle)

class attrib(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, attrib, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, attrib, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _libtype.new_attrib()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libtype.delete_attrib
    __del__ = lambda self : None;
    __swig_setmethods__["smap"] = _libtype.attrib_smap_set
    __swig_getmethods__["smap"] = _libtype.attrib_smap_get
    if _newclass:smap = _swig_property(_libtype.attrib_smap_get, _libtype.attrib_smap_set)
    __swig_setmethods__["time"] = _libtype.attrib_time_set
    __swig_getmethods__["time"] = _libtype.attrib_time_get
    if _newclass:time = _swig_property(_libtype.attrib_time_get, _libtype.attrib_time_set)
    __swig_setmethods__["imap"] = _libtype.attrib_imap_set
    __swig_getmethods__["imap"] = _libtype.attrib_imap_get
    if _newclass:imap = _swig_property(_libtype.attrib_imap_get, _libtype.attrib_imap_set)
    __swig_setmethods__["size"] = _libtype.attrib_size_set
    __swig_getmethods__["size"] = _libtype.attrib_size_get
    if _newclass:size = _swig_property(_libtype.attrib_size_get, _libtype.attrib_size_set)
    __swig_setmethods__["handle"] = _libtype.attrib_handle_set
    __swig_getmethods__["handle"] = _libtype.attrib_handle_get
    if _newclass:handle = _swig_property(_libtype.attrib_handle_get, _libtype.attrib_handle_set)
attrib_swigregister = _libtype.attrib_swigregister
attrib_swigregister(attrib)

class MapString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MapString, name)
    __repr__ = _swig_repr
    def iterator(self): return _libtype.MapString_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _libtype.MapString___nonzero__(self)
    def __bool__(self): return _libtype.MapString___bool__(self)
    def __len__(self): return _libtype.MapString___len__(self)
    def __getitem__(self, *args): return _libtype.MapString___getitem__(self, *args)
    def __delitem__(self, *args): return _libtype.MapString___delitem__(self, *args)
    def has_key(self, *args): return _libtype.MapString_has_key(self, *args)
    def keys(self): return _libtype.MapString_keys(self)
    def values(self): return _libtype.MapString_values(self)
    def items(self): return _libtype.MapString_items(self)
    def __contains__(self, *args): return _libtype.MapString___contains__(self, *args)
    def key_iterator(self): return _libtype.MapString_key_iterator(self)
    def value_iterator(self): return _libtype.MapString_value_iterator(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __setitem__(self, *args): return _libtype.MapString___setitem__(self, *args)
    def __init__(self, *args): 
        this = _libtype.new_MapString(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _libtype.MapString_empty(self)
    def size(self): return _libtype.MapString_size(self)
    def clear(self): return _libtype.MapString_clear(self)
    def swap(self, *args): return _libtype.MapString_swap(self, *args)
    def get_allocator(self): return _libtype.MapString_get_allocator(self)
    def begin(self): return _libtype.MapString_begin(self)
    def end(self): return _libtype.MapString_end(self)
    def rbegin(self): return _libtype.MapString_rbegin(self)
    def rend(self): return _libtype.MapString_rend(self)
    def count(self, *args): return _libtype.MapString_count(self, *args)
    def erase(self, *args): return _libtype.MapString_erase(self, *args)
    def find(self, *args): return _libtype.MapString_find(self, *args)
    def lower_bound(self, *args): return _libtype.MapString_lower_bound(self, *args)
    def upper_bound(self, *args): return _libtype.MapString_upper_bound(self, *args)
    __swig_destroy__ = _libtype.delete_MapString
    __del__ = lambda self : None;
MapString_swigregister = _libtype.MapString_swigregister
MapString_swigregister(MapString)

class MapVtime(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapVtime, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MapVtime, name)
    __repr__ = _swig_repr
    def iterator(self): return _libtype.MapVtime_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _libtype.MapVtime___nonzero__(self)
    def __bool__(self): return _libtype.MapVtime___bool__(self)
    def __len__(self): return _libtype.MapVtime___len__(self)
    def __getitem__(self, *args): return _libtype.MapVtime___getitem__(self, *args)
    def __delitem__(self, *args): return _libtype.MapVtime___delitem__(self, *args)
    def has_key(self, *args): return _libtype.MapVtime_has_key(self, *args)
    def keys(self): return _libtype.MapVtime_keys(self)
    def values(self): return _libtype.MapVtime_values(self)
    def items(self): return _libtype.MapVtime_items(self)
    def __contains__(self, *args): return _libtype.MapVtime___contains__(self, *args)
    def key_iterator(self): return _libtype.MapVtime_key_iterator(self)
    def value_iterator(self): return _libtype.MapVtime_value_iterator(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __setitem__(self, *args): return _libtype.MapVtime___setitem__(self, *args)
    def __init__(self, *args): 
        this = _libtype.new_MapVtime(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _libtype.MapVtime_empty(self)
    def size(self): return _libtype.MapVtime_size(self)
    def clear(self): return _libtype.MapVtime_clear(self)
    def swap(self, *args): return _libtype.MapVtime_swap(self, *args)
    def get_allocator(self): return _libtype.MapVtime_get_allocator(self)
    def begin(self): return _libtype.MapVtime_begin(self)
    def end(self): return _libtype.MapVtime_end(self)
    def rbegin(self): return _libtype.MapVtime_rbegin(self)
    def rend(self): return _libtype.MapVtime_rend(self)
    def count(self, *args): return _libtype.MapVtime_count(self, *args)
    def erase(self, *args): return _libtype.MapVtime_erase(self, *args)
    def find(self, *args): return _libtype.MapVtime_find(self, *args)
    def lower_bound(self, *args): return _libtype.MapVtime_lower_bound(self, *args)
    def upper_bound(self, *args): return _libtype.MapVtime_upper_bound(self, *args)
    __swig_destroy__ = _libtype.delete_MapVtime
    __del__ = lambda self : None;
MapVtime_swigregister = _libtype.MapVtime_swigregister
MapVtime_swigregister(MapVtime)

class MapInt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapInt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MapInt, name)
    __repr__ = _swig_repr
    def iterator(self): return _libtype.MapInt_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _libtype.MapInt___nonzero__(self)
    def __bool__(self): return _libtype.MapInt___bool__(self)
    def __len__(self): return _libtype.MapInt___len__(self)
    def __getitem__(self, *args): return _libtype.MapInt___getitem__(self, *args)
    def __delitem__(self, *args): return _libtype.MapInt___delitem__(self, *args)
    def has_key(self, *args): return _libtype.MapInt_has_key(self, *args)
    def keys(self): return _libtype.MapInt_keys(self)
    def values(self): return _libtype.MapInt_values(self)
    def items(self): return _libtype.MapInt_items(self)
    def __contains__(self, *args): return _libtype.MapInt___contains__(self, *args)
    def key_iterator(self): return _libtype.MapInt_key_iterator(self)
    def value_iterator(self): return _libtype.MapInt_value_iterator(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __setitem__(self, *args): return _libtype.MapInt___setitem__(self, *args)
    def __init__(self, *args): 
        this = _libtype.new_MapInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _libtype.MapInt_empty(self)
    def size(self): return _libtype.MapInt_size(self)
    def clear(self): return _libtype.MapInt_clear(self)
    def swap(self, *args): return _libtype.MapInt_swap(self, *args)
    def get_allocator(self): return _libtype.MapInt_get_allocator(self)
    def begin(self): return _libtype.MapInt_begin(self)
    def end(self): return _libtype.MapInt_end(self)
    def rbegin(self): return _libtype.MapInt_rbegin(self)
    def rend(self): return _libtype.MapInt_rend(self)
    def count(self, *args): return _libtype.MapInt_count(self, *args)
    def erase(self, *args): return _libtype.MapInt_erase(self, *args)
    def find(self, *args): return _libtype.MapInt_find(self, *args)
    def lower_bound(self, *args): return _libtype.MapInt_lower_bound(self, *args)
    def upper_bound(self, *args): return _libtype.MapInt_upper_bound(self, *args)
    __swig_destroy__ = _libtype.delete_MapInt
    __del__ = lambda self : None;
MapInt_swigregister = _libtype.MapInt_swigregister
MapInt_swigregister(MapInt)



