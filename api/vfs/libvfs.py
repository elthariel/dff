# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.38
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

"""
libvfs: c++ generated inteface
"""

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        try:
            fp, pathname, description = imp.find_module('_libvfs', [dirname(__file__)])
            _mod = imp.load_module('_libvfs', fp, pathname, description)
        finally:
            if fp is not None: fp.close()
        return _mod
    _libvfs = swig_import_helper()
    del swig_import_helper
else:
    import _libvfs
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _libvfs.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self):
        """
        value(self) -> PyObject

        1
        """
        return _libvfs.SwigPyIterator_value(self)

    def incr(self, n = 1):
        """
        incr(self, size_t n = 1) -> SwigPyIterator
        incr(self) -> SwigPyIterator

        1
        """
        return _libvfs.SwigPyIterator_incr(self, n)

    def decr(self, n = 1):
        """
        decr(self, size_t n = 1) -> SwigPyIterator
        decr(self) -> SwigPyIterator

        1
        """
        return _libvfs.SwigPyIterator_decr(self, n)

    def distance(self, *args):
        """
        distance(self, SwigPyIterator x) -> ptrdiff_t

        1
        """
        return _libvfs.SwigPyIterator_distance(self, *args)

    def equal(self, *args):
        """
        equal(self, SwigPyIterator x) -> bool

        1
        """
        return _libvfs.SwigPyIterator_equal(self, *args)

    def copy(self):
        """
        copy(self) -> SwigPyIterator

        1
        """
        return _libvfs.SwigPyIterator_copy(self)

    def next(self):
        """
        next(self) -> PyObject

        1
        """
        return _libvfs.SwigPyIterator_next(self)

    def __next__(self):
        """
        __next__(self) -> PyObject

        1
        """
        return _libvfs.SwigPyIterator___next__(self)

    def previous(self):
        """
        previous(self) -> PyObject

        1
        """
        return _libvfs.SwigPyIterator_previous(self)

    def advance(self, *args):
        """
        advance(self, ptrdiff_t n) -> SwigPyIterator

        1
        """
        return _libvfs.SwigPyIterator_advance(self, *args)

    def __eq__(self, *args):
        """
        __eq__(self, SwigPyIterator x) -> bool

        1
        """
        return _libvfs.SwigPyIterator___eq__(self, *args)

    def __ne__(self, *args):
        """
        __ne__(self, SwigPyIterator x) -> bool

        1
        """
        return _libvfs.SwigPyIterator___ne__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(self, ptrdiff_t n) -> SwigPyIterator

        1
        """
        return _libvfs.SwigPyIterator___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, ptrdiff_t n) -> SwigPyIterator

        1
        """
        return _libvfs.SwigPyIterator___isub__(self, *args)

    def __add__(self, *args):
        """
        __add__(self, ptrdiff_t n) -> SwigPyIterator

        1
        """
        return _libvfs.SwigPyIterator___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, ptrdiff_t n) -> SwigPyIterator
        __sub__(self, SwigPyIterator x) -> ptrdiff_t

        1
        """
        return _libvfs.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _libvfs.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class Node(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Node, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Node, name)
    __repr__ = _swig_repr
    __swig_setmethods__["same"] = _libvfs.Node_same_set
    __swig_getmethods__["same"] = _libvfs.Node_same_get
    if _newclass:same = _swig_property(_libvfs.Node_same_get, _libvfs.Node_same_set)
    __swig_setmethods__["fsobj"] = _libvfs.Node_fsobj_set
    __swig_getmethods__["fsobj"] = _libvfs.Node_fsobj_get
    if _newclass:fsobj = _swig_property(_libvfs.Node_fsobj_get, _libvfs.Node_fsobj_set)
    def open(self):
        """
        open(self) -> VFile

        1
        """
        return _libvfs.Node_open(self)

    __swig_setmethods__["attr"] = _libvfs.Node_attr_set
    __swig_getmethods__["attr"] = _libvfs.Node_attr_get
    if _newclass:attr = _swig_property(_libvfs.Node_attr_get, _libvfs.Node_attr_set)
    __swig_setmethods__["name"] = _libvfs.Node_name_set
    __swig_getmethods__["name"] = _libvfs.Node_name_get
    if _newclass:name = _swig_property(_libvfs.Node_name_get, _libvfs.Node_name_set)
    __swig_setmethods__["path"] = _libvfs.Node_path_set
    __swig_getmethods__["path"] = _libvfs.Node_path_get
    if _newclass:path = _swig_property(_libvfs.Node_path_get, _libvfs.Node_path_set)
    __swig_setmethods__["is_file"] = _libvfs.Node_is_file_set
    __swig_getmethods__["is_file"] = _libvfs.Node_is_file_get
    if _newclass:is_file = _swig_property(_libvfs.Node_is_file_get, _libvfs.Node_is_file_set)
    __swig_setmethods__["is_root"] = _libvfs.Node_is_root_set
    __swig_getmethods__["is_root"] = _libvfs.Node_is_root_get
    if _newclass:is_root = _swig_property(_libvfs.Node_is_root_get, _libvfs.Node_is_root_set)
    __swig_setmethods__["parent"] = _libvfs.Node_parent_set
    __swig_getmethods__["parent"] = _libvfs.Node_parent_get
    if _newclass:parent = _swig_property(_libvfs.Node_parent_get, _libvfs.Node_parent_set)
    __swig_setmethods__["next"] = _libvfs.Node_next_set
    __swig_getmethods__["next"] = _libvfs.Node_next_get
    if _newclass:next = _swig_property(_libvfs.Node_next_get, _libvfs.Node_next_set)
    def __init__(self): 
        """
        __init__(self) -> Node

        1
        """
        this = _libvfs.new_Node()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvfs.delete_Node
    __del__ = lambda self : None;
    def addchild(self, *args):
        """
        addchild(self, Node path)

        1
        """
        return _libvfs.Node_addchild(self, *args)

Node_swigregister = _libvfs.Node_swigregister
Node_swigregister(Node)

class CallBack(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CallBack, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CallBack, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, CBFUNC func, void data) -> CallBack

        1
        """
        this = _libvfs.new_CallBack(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["cbdata"] = _libvfs.CallBack_cbdata_set
    __swig_getmethods__["cbdata"] = _libvfs.CallBack_cbdata_get
    if _newclass:cbdata = _swig_property(_libvfs.CallBack_cbdata_get, _libvfs.CallBack_cbdata_set)
    __swig_setmethods__["cbfunc"] = _libvfs.CallBack_cbfunc_set
    __swig_getmethods__["cbfunc"] = _libvfs.CallBack_cbfunc_get
    if _newclass:cbfunc = _swig_property(_libvfs.CallBack_cbfunc_get, _libvfs.CallBack_cbfunc_set)
    __swig_destroy__ = _libvfs.delete_CallBack
    __del__ = lambda self : None;
CallBack_swigregister = _libvfs.CallBack_swigregister
CallBack_swigregister(CallBack)

class VFS(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VFS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VFS, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def Get():
        """
        Get() -> VFS

        1
        """
        return _libvfs.VFS_Get()

    if _newclass:Get = staticmethod(Get)
    __swig_getmethods__["Get"] = lambda x: Get
    def GetTree(self):
        """
        GetTree(self) -> SetNode

        1
        """
        return _libvfs.VFS_GetTree(self)

    def cd(self, *args):
        """
        cd(self, Node arg0)

        1
        """
        return _libvfs.VFS_cd(self, *args)

    def GetCWD(self):
        """
        GetCWD(self) -> Node

        1
        """
        return _libvfs.VFS_GetCWD(self)

    def GetNode(self, *args):
        """
        GetNode(self, string path) -> Node
        GetNode(self, string path, Node where) -> Node

        1
        """
        return _libvfs.VFS_GetNode(self, *args)

    def CreateNodeDir(self, *args):
        """
        CreateNodeDir(self, fso fsobj, Node parent, string name, attrib attr) -> Node

        1
        """
        return _libvfs.VFS_CreateNodeDir(self, *args)

    def CreateNodeFile(self, *args):
        """
        CreateNodeFile(self, fso fsobj, Node parent, string name, attrib attr) -> Node

        1
        """
        return _libvfs.VFS_CreateNodeFile(self, *args)

    def DeleteNode(self, *args):
        """
        DeleteNode(self, Node arg0) -> int

        1
        """
        return _libvfs.VFS_DeleteNode(self, *args)

    def DeleteNodeList(self, *args):
        """
        DeleteNodeList(self, ListNode nl)

        1
        """
        return _libvfs.VFS_DeleteNodeList(self, *args)

    def SetCallBack(self, *args):
        """
        SetCallBack(self, CBFUNC func, void cbdata, string type)

        1
        """
        return _libvfs.VFS_SetCallBack(self, *args)

    def AddNodes(self, *args):
        """
        AddNodes(self, ListNode nl) -> unsigned int

        1
        """
        return _libvfs.VFS_AddNodes(self, *args)

    def set_callback(self, *args):
        """
        set_callback(self, string type, PyObject pyfunc)

        1
        """
        return _libvfs.VFS_set_callback(self, *args)

VFS_swigregister = _libvfs.VFS_swigregister
VFS_swigregister(VFS)

def VFS_Get():
  """
    VFS_Get() -> VFS

    1
    """
  return _libvfs.VFS_Get()

class fso(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fso, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fso, name)
    __repr__ = _swig_repr
    __swig_setmethods__["arg"] = _libvfs.fso_arg_set
    __swig_getmethods__["arg"] = _libvfs.fso_arg_get
    if _newclass:arg = _swig_property(_libvfs.fso_arg_get, _libvfs.fso_arg_set)
    __swig_setmethods__["res"] = _libvfs.fso_res_set
    __swig_getmethods__["res"] = _libvfs.fso_res_get
    if _newclass:res = _swig_property(_libvfs.fso_res_get, _libvfs.fso_res_set)
    __swig_setmethods__["name"] = _libvfs.fso_name_set
    __swig_getmethods__["name"] = _libvfs.fso_name_get
    if _newclass:name = _swig_property(_libvfs.fso_name_get, _libvfs.fso_name_set)
    __swig_setmethods__["stateinfo"] = _libvfs.fso_stateinfo_set
    __swig_getmethods__["stateinfo"] = _libvfs.fso_stateinfo_get
    if _newclass:stateinfo = _swig_property(_libvfs.fso_stateinfo_get, _libvfs.fso_stateinfo_set)
    def __init__(self): 
        """
        __init__(self) -> fso

        1
        """
        if self.__class__ == fso:
            _self = None
        else:
            _self = self
        this = _libvfs.new_fso(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvfs.delete_fso
    __del__ = lambda self : None;
    def start(self, *args):
        """
        start(self, argument args)

        1
        """
        return _libvfs.fso_start(self, *args)

    def vopen(self, *args):
        """
        vopen(self, Handle handle) -> int

        1
        """
        return _libvfs.fso_vopen(self, *args)

    def vread(self, *args):
        """
        vread(self, int fd, void buff, unsigned int size) -> int

        1
        """
        return _libvfs.fso_vread(self, *args)

    def vwrite(self, *args):
        """
        vwrite(self, int fd, void buff, unsigned int size) -> int

        1
        """
        return _libvfs.fso_vwrite(self, *args)

    def vclose(self, *args):
        """
        vclose(self, int fd) -> int

        1
        """
        return _libvfs.fso_vclose(self, *args)

    def vseek(self, *args):
        """
        vseek(self, int fd, dff_ui64 offset, int whence) -> dff_ui64

        1
        """
        return _libvfs.fso_vseek(self, *args)

    def status(self):
        """
        status(self) -> unsigned int

        1
        """
        return _libvfs.fso_status(self)

    def CreateNodeDir(self, *args):
        """
        CreateNodeDir(self, Node parent, string name, attrib attr) -> Node

        1
        """
        return _libvfs.fso_CreateNodeDir(self, *args)

    def CreateNodeFile(self, *args):
        """
        CreateNodeFile(self, Node parent, string name, attrib attr) -> Node

        1
        """
        return _libvfs.fso_CreateNodeFile(self, *args)

    __swig_setmethods__["nl"] = _libvfs.fso_nl_set
    __swig_getmethods__["nl"] = _libvfs.fso_nl_get
    if _newclass:nl = _swig_property(_libvfs.fso_nl_get, _libvfs.fso_nl_set)
    def AddNodes(self):
        """
        AddNodes(self) -> unsigned int

        1
        """
        return _libvfs.fso_AddNodes(self)

    def __disown__(self):
        self.this.disown()
        _libvfs.disown_fso(self)
        return weakref_proxy(self)
fso_swigregister = _libvfs.fso_swigregister
fso_swigregister(fso)

class pdata(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pdata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pdata, name)
    __repr__ = _swig_repr
    __swig_setmethods__["buff"] = _libvfs.pdata_buff_set
    __swig_getmethods__["buff"] = _libvfs.pdata_buff_get
    if _newclass:buff = _swig_property(_libvfs.pdata_buff_get, _libvfs.pdata_buff_set)
    __swig_setmethods__["len"] = _libvfs.pdata_len_set
    __swig_getmethods__["len"] = _libvfs.pdata_len_get
    if _newclass:len = _swig_property(_libvfs.pdata_len_get, _libvfs.pdata_len_set)
    def __init__(self): 
        """
        __init__(self) -> pdata

        1
        """
        this = _libvfs.new_pdata()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvfs.delete_pdata
    __del__ = lambda self : None;
pdata_swigregister = _libvfs.pdata_swigregister
pdata_swigregister(pdata)

class VFile(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VFile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VFile, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fd"] = _libvfs.VFile_fd_set
    __swig_getmethods__["fd"] = _libvfs.VFile_fd_get
    if _newclass:fd = _swig_property(_libvfs.VFile_fd_get, _libvfs.VFile_fd_set)
    __swig_setmethods__["node"] = _libvfs.VFile_node_set
    __swig_getmethods__["node"] = _libvfs.VFile_node_get
    if _newclass:node = _swig_property(_libvfs.VFile_node_get, _libvfs.VFile_node_set)
    def close(self):
        """
        close(self) -> int

        1
        """
        return _libvfs.VFile_close(self)

    def read(self, *args):
        """
        read(self)
        read(self, unsigned int size)
        read(self, void buff, unsigned int size) -> int

        1
        """
        return _libvfs.VFile_read(self, *args)

    def seek(self, *args):
        """
        seek(self, dff_ui64 offset, char whence) -> dff_ui64
        seek(self, dff_ui64 offset, int whence) -> dff_ui64
        seek(self, dff_ui64 offset) -> dff_ui64
        seek(self, int offset, int whence) -> long long

        1
        """
        return _libvfs.VFile_seek(self, *args)

    def write(self, *args):
        """
        write(self, string buff) -> int
        write(self, char buff, unsigned int size) -> int

        1
        """
        return _libvfs.VFile_write(self, *args)

    def fileno(self):
        """
        fileno(self) -> int

        1
        """
        return _libvfs.VFile_fileno(self)

    def tell(self):
        """
        tell(self) -> dff_ui64

        1
        """
        return _libvfs.VFile_tell(self)

    def __init__(self): 
        """
        __init__(self) -> VFile

        1
        """
        this = _libvfs.new_VFile()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libvfs.delete_VFile
    __del__ = lambda self : None;
VFile_swigregister = _libvfs.VFile_swigregister
VFile_swigregister(VFile)

class ListNode(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ListNode, name)
    __repr__ = _swig_repr
    def iterator(self):
        """
        iterator(self) -> SwigPyIterator

        1
        """
        return _libvfs.ListNode_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(self) -> bool

        1
        """
        return _libvfs.ListNode___nonzero__(self)

    def __bool__(self):
        """
        __bool__(self) -> bool

        1
        """
        return _libvfs.ListNode___bool__(self)

    def __len__(self):
        """
        __len__(self) -> size_type

        1
        """
        return _libvfs.ListNode___len__(self)

    def pop(self):
        """
        pop(self) -> value_type

        1
        """
        return _libvfs.ListNode_pop(self)

    def __getslice__(self, *args):
        """
        __getslice__(self, difference_type i, difference_type j) -> ListNode

        1
        """
        return _libvfs.ListNode___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(self, difference_type i, difference_type j, ListNode v)

        1
        """
        return _libvfs.ListNode___setslice__(self, *args)

    def __delslice__(self, *args):
        """
        __delslice__(self, difference_type i, difference_type j)

        1
        """
        return _libvfs.ListNode___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)

        1
        """
        return _libvfs.ListNode___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> ListNode
        __getitem__(self, difference_type i) -> value_type

        1
        """
        return _libvfs.ListNode___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, ListNode v)
        __setitem__(self, difference_type i, value_type x)

        1
        """
        return _libvfs.ListNode___setitem__(self, *args)

    def append(self, *args):
        """
        append(self, value_type x)

        1
        """
        return _libvfs.ListNode_append(self, *args)

    def empty(self):
        """
        empty(self) -> bool

        1
        """
        return _libvfs.ListNode_empty(self)

    def size(self):
        """
        size(self) -> size_type

        1
        """
        return _libvfs.ListNode_size(self)

    def clear(self):
        """
        clear(self)

        1
        """
        return _libvfs.ListNode_clear(self)

    def swap(self, *args):
        """
        swap(self, ListNode v)

        1
        """
        return _libvfs.ListNode_swap(self, *args)

    def get_allocator(self):
        """
        get_allocator(self) -> allocator_type

        1
        """
        return _libvfs.ListNode_get_allocator(self)

    def begin(self):
        """
        begin(self) -> const_iterator

        1
        """
        return _libvfs.ListNode_begin(self)

    def end(self):
        """
        end(self) -> const_iterator

        1
        """
        return _libvfs.ListNode_end(self)

    def rbegin(self):
        """
        rbegin(self) -> const_reverse_iterator

        1
        """
        return _libvfs.ListNode_rbegin(self)

    def rend(self):
        """
        rend(self) -> const_reverse_iterator

        1
        """
        return _libvfs.ListNode_rend(self)

    def pop_back(self):
        """
        pop_back(self)

        1
        """
        return _libvfs.ListNode_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator

        1
        """
        return _libvfs.ListNode_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> ListNode
        __init__(self, ListNode arg0) -> ListNode
        __init__(self, size_type size) -> ListNode
        __init__(self, size_type size, value_type value) -> ListNode

        1
        """
        this = _libvfs.new_ListNode(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """
        push_back(self, value_type x)

        1
        """
        return _libvfs.ListNode_push_back(self, *args)

    def front(self):
        """
        front(self) -> value_type

        1
        """
        return _libvfs.ListNode_front(self)

    def back(self):
        """
        back(self) -> value_type

        1
        """
        return _libvfs.ListNode_back(self)

    def assign(self, *args):
        """
        assign(self, size_type n, value_type x)

        1
        """
        return _libvfs.ListNode_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)

        1
        """
        return _libvfs.ListNode_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)

        1
        """
        return _libvfs.ListNode_insert(self, *args)

    def pop_front(self):
        """
        pop_front(self)

        1
        """
        return _libvfs.ListNode_pop_front(self)

    def push_front(self, *args):
        """
        push_front(self, value_type x)

        1
        """
        return _libvfs.ListNode_push_front(self, *args)

    def remove(self, *args):
        """
        remove(self, value_type x)

        1
        """
        return _libvfs.ListNode_remove(self, *args)

    def unique(self):
        """
        unique(self)

        1
        """
        return _libvfs.ListNode_unique(self)

    def reverse(self):
        """
        reverse(self)

        1
        """
        return _libvfs.ListNode_reverse(self)

    def sort(self):
        """
        sort(self)

        1
        """
        return _libvfs.ListNode_sort(self)

    def merge(self, *args):
        """
        merge(self, ListNode x)

        1
        """
        return _libvfs.ListNode_merge(self, *args)

    __swig_destroy__ = _libvfs.delete_ListNode
    __del__ = lambda self : None;
ListNode_swigregister = _libvfs.ListNode_swigregister
ListNode_swigregister(ListNode)

class SetNode(_object):
    """1"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SetNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SetNode, name)
    __repr__ = _swig_repr
    def iterator(self):
        """
        iterator(self) -> SwigPyIterator

        1
        """
        return _libvfs.SetNode_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """
        __nonzero__(self) -> bool

        1
        """
        return _libvfs.SetNode___nonzero__(self)

    def __bool__(self):
        """
        __bool__(self) -> bool

        1
        """
        return _libvfs.SetNode___bool__(self)

    def __len__(self):
        """
        __len__(self) -> size_type

        1
        """
        return _libvfs.SetNode___len__(self)

    def append(self, *args):
        """
        append(self, value_type x)

        1
        """
        return _libvfs.SetNode_append(self, *args)

    def __contains__(self, *args):
        """
        __contains__(self, value_type x) -> bool

        1
        """
        return _libvfs.SetNode___contains__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, difference_type i) -> value_type

        1
        """
        return _libvfs.SetNode___getitem__(self, *args)

    def __init__(self, *args): 
        """
        __init__(self, std::less<(p.Node)> arg0) -> SetNode
        __init__(self) -> SetNode
        __init__(self, SetNode arg0) -> SetNode

        1
        """
        this = _libvfs.new_SetNode(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self):
        """
        empty(self) -> bool

        1
        """
        return _libvfs.SetNode_empty(self)

    def size(self):
        """
        size(self) -> size_type

        1
        """
        return _libvfs.SetNode_size(self)

    def clear(self):
        """
        clear(self)

        1
        """
        return _libvfs.SetNode_clear(self)

    def swap(self, *args):
        """
        swap(self, SetNode v)

        1
        """
        return _libvfs.SetNode_swap(self, *args)

    def count(self, *args):
        """
        count(self, key_type x) -> size_type

        1
        """
        return _libvfs.SetNode_count(self, *args)

    def begin(self):
        """
        begin(self) -> iterator

        1
        """
        return _libvfs.SetNode_begin(self)

    def end(self):
        """
        end(self) -> iterator

        1
        """
        return _libvfs.SetNode_end(self)

    def rbegin(self):
        """
        rbegin(self) -> reverse_iterator

        1
        """
        return _libvfs.SetNode_rbegin(self)

    def rend(self):
        """
        rend(self) -> reverse_iterator

        1
        """
        return _libvfs.SetNode_rend(self)

    def erase(self, *args):
        """
        erase(self, key_type x) -> size_type
        erase(self, iterator pos)
        erase(self, iterator first, iterator last)

        1
        """
        return _libvfs.SetNode_erase(self, *args)

    def find(self, *args):
        """
        find(self, key_type x) -> iterator

        1
        """
        return _libvfs.SetNode_find(self, *args)

    def lower_bound(self, *args):
        """
        lower_bound(self, key_type x) -> iterator

        1
        """
        return _libvfs.SetNode_lower_bound(self, *args)

    def upper_bound(self, *args):
        """
        upper_bound(self, key_type x) -> iterator

        1
        """
        return _libvfs.SetNode_upper_bound(self, *args)

    def equal_range(self, *args):
        """
        equal_range(self, key_type x) -> std::pair<(std::set<(p.Node)>::iterator,std::set<(p.Node)>::iterator)>

        1
        """
        return _libvfs.SetNode_equal_range(self, *args)

    def insert(self, *args):
        """
        insert(self, value_type __x) -> std::pair<(std::set<(p.Node)>::iterator,bool)>

        1
        """
        return _libvfs.SetNode_insert(self, *args)

    __swig_destroy__ = _libvfs.delete_SetNode
    __del__ = lambda self : None;
SetNode_swigregister = _libvfs.SetNode_swigregister
SetNode_swigregister(SetNode)



