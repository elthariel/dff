# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.38
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        try:
            fp, pathname, description = imp.find_module('_libenv', [dirname(__file__)])
            _mod = imp.load_module('_libenv', fp, pathname, description)
        finally:
            if fp is not None: fp.close()
        return _mod
    _libenv = swig_import_helper()
    del swig_import_helper
else:
    import _libenv
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _libenv.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _libenv.SwigPyIterator_value(self)
    def incr(self, n = 1): return _libenv.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _libenv.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _libenv.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _libenv.SwigPyIterator_equal(self, *args)
    def copy(self): return _libenv.SwigPyIterator_copy(self)
    def next(self): return _libenv.SwigPyIterator_next(self)
    def __next__(self): return _libenv.SwigPyIterator___next__(self)
    def previous(self): return _libenv.SwigPyIterator_previous(self)
    def advance(self, *args): return _libenv.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _libenv.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _libenv.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _libenv.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _libenv.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _libenv.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _libenv.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _libenv.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

import api.exceptions.libexceptions
class v_key(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, v_key, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, v_key, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _libenv.new_v_key()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libenv.delete_v_key
    __del__ = lambda self : None;
    __swig_setmethods__["descr_l"] = _libenv.v_key_descr_l_set
    __swig_getmethods__["descr_l"] = _libenv.v_key_descr_l_get
    if _newclass:descr_l = _swig_property(_libenv.v_key_descr_l_get, _libenv.v_key_descr_l_set)
    __swig_setmethods__["val_l"] = _libenv.v_key_val_l_set
    __swig_getmethods__["val_l"] = _libenv.v_key_val_l_get
    if _newclass:val_l = _swig_property(_libenv.v_key_val_l_get, _libenv.v_key_val_l_set)
    def add_var_descr(self, *args): return _libenv.v_key_add_var_descr(self, *args)
    def add_var_val(self, *args): return _libenv.v_key_add_var_val(self, *args)
v_key_swigregister = _libenv.v_key_swigregister
v_key_swigregister(v_key)

class env(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, env, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, env, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["vars_db"] = _libenv.env_vars_db_set
    __swig_getmethods__["vars_db"] = _libenv.env_vars_db_get
    if _newclass:vars_db = _swig_property(_libenv.env_vars_db_get, _libenv.env_vars_db_set)
    __swig_getmethods__["Get"] = lambda x: _libenv.env_Get
    if _newclass:Get = staticmethod(_libenv.env_Get)
    def add_var_descr(self, *args): return _libenv.env_add_var_descr(self, *args)
    def add_var_val(self, *args): return _libenv.env_add_var_val(self, *args)
env_swigregister = _libenv.env_swigregister
env_swigregister(env)

def env_Get():
  return _libenv.env_Get()
env_Get = _libenv.env_Get

class vars(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vars, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vars, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _libenv.vars_name_set
    __swig_getmethods__["name"] = _libenv.vars_name_get
    if _newclass:name = _swig_property(_libenv.vars_name_get, _libenv.vars_name_set)
    __swig_setmethods__["description"] = _libenv.vars_description_set
    __swig_getmethods__["description"] = _libenv.vars_description_get
    if _newclass:description = _swig_property(_libenv.vars_description_get, _libenv.vars_description_set)
    __swig_setmethods__["type"] = _libenv.vars_type_set
    __swig_getmethods__["type"] = _libenv.vars_type_get
    if _newclass:type = _swig_property(_libenv.vars_type_get, _libenv.vars_type_set)
    __swig_setmethods__["_from"] = _libenv.vars__from_set
    __swig_getmethods__["_from"] = _libenv.vars__from_get
    if _newclass:_from = _swig_property(_libenv.vars__from_get, _libenv.vars__from_set)
    __swig_setmethods__["optional"] = _libenv.vars_optional_set
    __swig_getmethods__["optional"] = _libenv.vars_optional_get
    if _newclass:optional = _swig_property(_libenv.vars_optional_get, _libenv.vars_optional_set)
    def __init__(self): 
        this = _libenv.new_vars()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libenv.delete_vars
    __del__ = lambda self : None;
vars_swigregister = _libenv.vars_swigregister
vars_swigregister(vars)

class v_descr(vars):
    __swig_setmethods__ = {}
    for _s in [vars]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, v_descr, name, value)
    __swig_getmethods__ = {}
    for _s in [vars]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, v_descr, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _libenv.new_v_descr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libenv.delete_v_descr
    __del__ = lambda self : None;
v_descr_swigregister = _libenv.v_descr_swigregister
v_descr_swigregister(v_descr)

class v_descr_int(v_descr):
    __swig_setmethods__ = {}
    for _s in [v_descr]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, v_descr_int, name, value)
    __swig_getmethods__ = {}
    for _s in [v_descr]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, v_descr_int, name)
    __repr__ = _swig_repr
    __swig_setmethods__["max"] = _libenv.v_descr_int_max_set
    __swig_getmethods__["max"] = _libenv.v_descr_int_max_get
    if _newclass:max = _swig_property(_libenv.v_descr_int_max_get, _libenv.v_descr_int_max_set)
    __swig_setmethods__["min"] = _libenv.v_descr_int_min_set
    __swig_getmethods__["min"] = _libenv.v_descr_int_min_get
    if _newclass:min = _swig_property(_libenv.v_descr_int_min_get, _libenv.v_descr_int_min_set)
    __swig_setmethods__["descr"] = _libenv.v_descr_int_descr_set
    __swig_getmethods__["descr"] = _libenv.v_descr_int_descr_get
    if _newclass:descr = _swig_property(_libenv.v_descr_int_descr_get, _libenv.v_descr_int_descr_set)
    def __init__(self, *args): 
        this = _libenv.new_v_descr_int(*args)
        try: self.this.append(this)
        except: self.this = this
    def check_val(self, *args): return _libenv.v_descr_int_check_val(self, *args)
    __swig_destroy__ = _libenv.delete_v_descr_int
    __del__ = lambda self : None;
v_descr_int_swigregister = _libenv.v_descr_int_swigregister
v_descr_int_swigregister(v_descr_int)

class v_descr_string(v_descr):
    __swig_setmethods__ = {}
    for _s in [v_descr]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, v_descr_string, name, value)
    __swig_getmethods__ = {}
    for _s in [v_descr]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, v_descr_string, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libenv.new_v_descr_string(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libenv.delete_v_descr_string
    __del__ = lambda self : None;
v_descr_string_swigregister = _libenv.v_descr_string_swigregister
v_descr_string_swigregister(v_descr_string)

class v_descr_bool(v_descr):
    __swig_setmethods__ = {}
    for _s in [v_descr]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, v_descr_bool, name, value)
    __swig_getmethods__ = {}
    for _s in [v_descr]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, v_descr_bool, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libenv.new_v_descr_bool(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libenv.delete_v_descr_bool
    __del__ = lambda self : None;
v_descr_bool_swigregister = _libenv.v_descr_bool_swigregister
v_descr_bool_swigregister(v_descr_bool)

class v_descr_path(v_descr):
    __swig_setmethods__ = {}
    for _s in [v_descr]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, v_descr_path, name, value)
    __swig_getmethods__ = {}
    for _s in [v_descr]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, v_descr_path, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libenv.new_v_descr_path(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libenv.delete_v_descr_path
    __del__ = lambda self : None;
v_descr_path_swigregister = _libenv.v_descr_path_swigregister
v_descr_path_swigregister(v_descr_path)

class v_descr_node(v_descr):
    __swig_setmethods__ = {}
    for _s in [v_descr]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, v_descr_node, name, value)
    __swig_getmethods__ = {}
    for _s in [v_descr]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, v_descr_node, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libenv.new_v_descr_node(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libenv.delete_v_descr_node
    __del__ = lambda self : None;
v_descr_node_swigregister = _libenv.v_descr_node_swigregister
v_descr_node_swigregister(v_descr_node)

class v_val(vars):
    __swig_setmethods__ = {}
    for _s in [vars]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, v_val, name, value)
    __swig_getmethods__ = {}
    for _s in [vars]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, v_val, name)
    __repr__ = _swig_repr
    def get_int(self): return _libenv.v_val_get_int(self)
    def get_string(self): return _libenv.v_val_get_string(self)
    def get_node(self): return _libenv.v_val_get_node(self)
    def get_path(self): return _libenv.v_val_get_path(self)
    def get_bool(self): return _libenv.v_val_get_bool(self)
    def __init__(self): 
        this = _libenv.new_v_val()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libenv.delete_v_val
    __del__ = lambda self : None;
v_val_swigregister = _libenv.v_val_swigregister
v_val_swigregister(v_val)

class v_val_int(v_val):
    __swig_setmethods__ = {}
    for _s in [v_val]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, v_val_int, name, value)
    __swig_getmethods__ = {}
    for _s in [v_val]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, v_val_int, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value"] = _libenv.v_val_int_value_set
    __swig_getmethods__["value"] = _libenv.v_val_int_value_get
    if _newclass:value = _swig_property(_libenv.v_val_int_value_get, _libenv.v_val_int_value_set)
    def __init__(self, *args): 
        this = _libenv.new_v_val_int(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libenv.delete_v_val_int
    __del__ = lambda self : None;
v_val_int_swigregister = _libenv.v_val_int_swigregister
v_val_int_swigregister(v_val_int)

class v_val_string(v_val):
    __swig_setmethods__ = {}
    for _s in [v_val]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, v_val_string, name, value)
    __swig_getmethods__ = {}
    for _s in [v_val]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, v_val_string, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value"] = _libenv.v_val_string_value_set
    __swig_getmethods__["value"] = _libenv.v_val_string_value_get
    if _newclass:value = _swig_property(_libenv.v_val_string_value_get, _libenv.v_val_string_value_set)
    def __init__(self, *args): 
        this = _libenv.new_v_val_string(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libenv.delete_v_val_string
    __del__ = lambda self : None;
v_val_string_swigregister = _libenv.v_val_string_swigregister
v_val_string_swigregister(v_val_string)

class v_val_bool(v_val):
    __swig_setmethods__ = {}
    for _s in [v_val]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, v_val_bool, name, value)
    __swig_getmethods__ = {}
    for _s in [v_val]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, v_val_bool, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value"] = _libenv.v_val_bool_value_set
    __swig_getmethods__["value"] = _libenv.v_val_bool_value_get
    if _newclass:value = _swig_property(_libenv.v_val_bool_value_get, _libenv.v_val_bool_value_set)
    def __init__(self, *args): 
        this = _libenv.new_v_val_bool(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libenv.delete_v_val_bool
    __del__ = lambda self : None;
v_val_bool_swigregister = _libenv.v_val_bool_swigregister
v_val_bool_swigregister(v_val_bool)

class v_val_node(v_val):
    __swig_setmethods__ = {}
    for _s in [v_val]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, v_val_node, name, value)
    __swig_getmethods__ = {}
    for _s in [v_val]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, v_val_node, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value"] = _libenv.v_val_node_value_set
    __swig_getmethods__["value"] = _libenv.v_val_node_value_get
    if _newclass:value = _swig_property(_libenv.v_val_node_value_get, _libenv.v_val_node_value_set)
    def __init__(self, *args): 
        this = _libenv.new_v_val_node(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libenv.delete_v_val_node
    __del__ = lambda self : None;
v_val_node_swigregister = _libenv.v_val_node_swigregister
v_val_node_swigregister(v_val_node)

class v_val_path(v_val):
    __swig_setmethods__ = {}
    for _s in [v_val]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, v_val_path, name, value)
    __swig_getmethods__ = {}
    for _s in [v_val]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, v_val_path, name)
    __repr__ = _swig_repr
    __swig_setmethods__["value"] = _libenv.v_val_path_value_set
    __swig_getmethods__["value"] = _libenv.v_val_path_value_get
    if _newclass:value = _swig_property(_libenv.v_val_path_value_get, _libenv.v_val_path_value_set)
    def __init__(self, *args): 
        this = _libenv.new_v_val_path(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libenv.delete_v_val_path
    __del__ = lambda self : None;
v_val_path_swigregister = _libenv.v_val_path_swigregister
v_val_path_swigregister(v_val_path)

class config(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, config, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, config, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libenv.new_config(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["descr_l"] = _libenv.config_descr_l_set
    __swig_getmethods__["descr_l"] = _libenv.config_descr_l_get
    if _newclass:descr_l = _swig_property(_libenv.config_descr_l_get, _libenv.config_descr_l_set)
    __swig_setmethods__["val_l"] = _libenv.config_val_l_set
    __swig_getmethods__["val_l"] = _libenv.config_val_l_get
    if _newclass:val_l = _swig_property(_libenv.config_val_l_get, _libenv.config_val_l_set)
    __swig_setmethods__["description"] = _libenv.config_description_set
    __swig_getmethods__["description"] = _libenv.config_description_get
    if _newclass:description = _swig_property(_libenv.config_description_get, _libenv.config_description_set)
    def add(self, *args): return _libenv.config_add(self, *args)
    def add_const(self, *args): return _libenv.config_add_const(self, *args)
    __swig_destroy__ = _libenv.delete_config
    __del__ = lambda self : None;
config_swigregister = _libenv.config_swigregister
config_swigregister(config)

class argument(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, argument, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, argument, name)
    __repr__ = _swig_repr
    __swig_setmethods__["val_m"] = _libenv.argument_val_m_set
    __swig_getmethods__["val_m"] = _libenv.argument_val_m_get
    if _newclass:val_m = _swig_property(_libenv.argument_val_m_get, _libenv.argument_val_m_set)
    def __init__(self, *args): 
        this = _libenv.new_argument(*args)
        try: self.this.append(this)
        except: self.this = this
    def add_int(self, *args): return _libenv.argument_add_int(self, *args)
    def add_string(self, *args): return _libenv.argument_add_string(self, *args)
    def add_bool(self, *args): return _libenv.argument_add_bool(self, *args)
    def add_node(self, *args): return _libenv.argument_add_node(self, *args)
    def add_path(self, *args): return _libenv.argument_add_path(self, *args)
    def get(self, *args): return _libenv.argument_get(self, *args)
    def get_int(self, *args): return _libenv.argument_get_int(self, *args)
    def get_bool(self, *args): return _libenv.argument_get_bool(self, *args)
    def get_string(self, *args): return _libenv.argument_get_string(self, *args)
    def get_node(self, *args): return _libenv.argument_get_node(self, *args)
    def get_path(self, *args): return _libenv.argument_get_path(self, *args)
    __swig_destroy__ = _libenv.delete_argument
    __del__ = lambda self : None;
argument_swigregister = _libenv.argument_swigregister
argument_swigregister(argument)

class results(argument):
    __swig_setmethods__ = {}
    for _s in [argument]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, results, name, value)
    __swig_getmethods__ = {}
    for _s in [argument]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, results, name)
    __repr__ = _swig_repr
    __swig_setmethods__["_from"] = _libenv.results__from_set
    __swig_getmethods__["_from"] = _libenv.results__from_get
    if _newclass:_from = _swig_property(_libenv.results__from_get, _libenv.results__from_set)
    def __init__(self, *args): 
        this = _libenv.new_results(*args)
        try: self.this.append(this)
        except: self.this = this
    def add_const(self, *args): return _libenv.results_add_const(self, *args)
    __swig_destroy__ = _libenv.delete_results
    __del__ = lambda self : None;
results_swigregister = _libenv.results_swigregister
results_swigregister(results)

class ListDescr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListDescr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ListDescr, name)
    __repr__ = _swig_repr
    def iterator(self): return _libenv.ListDescr_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _libenv.ListDescr___nonzero__(self)
    def __bool__(self): return _libenv.ListDescr___bool__(self)
    def __len__(self): return _libenv.ListDescr___len__(self)
    def pop(self): return _libenv.ListDescr_pop(self)
    def __getslice__(self, *args): return _libenv.ListDescr___getslice__(self, *args)
    def __setslice__(self, *args): return _libenv.ListDescr___setslice__(self, *args)
    def __delslice__(self, *args): return _libenv.ListDescr___delslice__(self, *args)
    def __delitem__(self, *args): return _libenv.ListDescr___delitem__(self, *args)
    def __getitem__(self, *args): return _libenv.ListDescr___getitem__(self, *args)
    def __setitem__(self, *args): return _libenv.ListDescr___setitem__(self, *args)
    def append(self, *args): return _libenv.ListDescr_append(self, *args)
    def empty(self): return _libenv.ListDescr_empty(self)
    def size(self): return _libenv.ListDescr_size(self)
    def clear(self): return _libenv.ListDescr_clear(self)
    def swap(self, *args): return _libenv.ListDescr_swap(self, *args)
    def get_allocator(self): return _libenv.ListDescr_get_allocator(self)
    def begin(self): return _libenv.ListDescr_begin(self)
    def end(self): return _libenv.ListDescr_end(self)
    def rbegin(self): return _libenv.ListDescr_rbegin(self)
    def rend(self): return _libenv.ListDescr_rend(self)
    def pop_back(self): return _libenv.ListDescr_pop_back(self)
    def erase(self, *args): return _libenv.ListDescr_erase(self, *args)
    def __init__(self, *args): 
        this = _libenv.new_ListDescr(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _libenv.ListDescr_push_back(self, *args)
    def front(self): return _libenv.ListDescr_front(self)
    def back(self): return _libenv.ListDescr_back(self)
    def assign(self, *args): return _libenv.ListDescr_assign(self, *args)
    def resize(self, *args): return _libenv.ListDescr_resize(self, *args)
    def insert(self, *args): return _libenv.ListDescr_insert(self, *args)
    def pop_front(self): return _libenv.ListDescr_pop_front(self)
    def push_front(self, *args): return _libenv.ListDescr_push_front(self, *args)
    def remove(self, *args): return _libenv.ListDescr_remove(self, *args)
    def unique(self): return _libenv.ListDescr_unique(self)
    def reverse(self): return _libenv.ListDescr_reverse(self)
    def sort(self): return _libenv.ListDescr_sort(self)
    def merge(self, *args): return _libenv.ListDescr_merge(self, *args)
    __swig_destroy__ = _libenv.delete_ListDescr
    __del__ = lambda self : None;
ListDescr_swigregister = _libenv.ListDescr_swigregister
ListDescr_swigregister(ListDescr)

class MapVal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapVal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MapVal, name)
    __repr__ = _swig_repr
    def iterator(self): return _libenv.MapVal_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _libenv.MapVal___nonzero__(self)
    def __bool__(self): return _libenv.MapVal___bool__(self)
    def __len__(self): return _libenv.MapVal___len__(self)
    def __getitem__(self, *args): return _libenv.MapVal___getitem__(self, *args)
    def __delitem__(self, *args): return _libenv.MapVal___delitem__(self, *args)
    def has_key(self, *args): return _libenv.MapVal_has_key(self, *args)
    def keys(self): return _libenv.MapVal_keys(self)
    def values(self): return _libenv.MapVal_values(self)
    def items(self): return _libenv.MapVal_items(self)
    def __contains__(self, *args): return _libenv.MapVal___contains__(self, *args)
    def key_iterator(self): return _libenv.MapVal_key_iterator(self)
    def value_iterator(self): return _libenv.MapVal_value_iterator(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __setitem__(self, *args): return _libenv.MapVal___setitem__(self, *args)
    def __init__(self, *args): 
        this = _libenv.new_MapVal(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _libenv.MapVal_empty(self)
    def size(self): return _libenv.MapVal_size(self)
    def clear(self): return _libenv.MapVal_clear(self)
    def swap(self, *args): return _libenv.MapVal_swap(self, *args)
    def get_allocator(self): return _libenv.MapVal_get_allocator(self)
    def begin(self): return _libenv.MapVal_begin(self)
    def end(self): return _libenv.MapVal_end(self)
    def rbegin(self): return _libenv.MapVal_rbegin(self)
    def rend(self): return _libenv.MapVal_rend(self)
    def count(self, *args): return _libenv.MapVal_count(self, *args)
    def erase(self, *args): return _libenv.MapVal_erase(self, *args)
    def find(self, *args): return _libenv.MapVal_find(self, *args)
    def lower_bound(self, *args): return _libenv.MapVal_lower_bound(self, *args)
    def upper_bound(self, *args): return _libenv.MapVal_upper_bound(self, *args)
    __swig_destroy__ = _libenv.delete_MapVal
    __del__ = lambda self : None;
MapVal_swigregister = _libenv.MapVal_swigregister
MapVal_swigregister(MapVal)

class ListVal(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ListVal, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ListVal, name)
    __repr__ = _swig_repr
    def iterator(self): return _libenv.ListVal_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _libenv.ListVal___nonzero__(self)
    def __bool__(self): return _libenv.ListVal___bool__(self)
    def __len__(self): return _libenv.ListVal___len__(self)
    def pop(self): return _libenv.ListVal_pop(self)
    def __getslice__(self, *args): return _libenv.ListVal___getslice__(self, *args)
    def __setslice__(self, *args): return _libenv.ListVal___setslice__(self, *args)
    def __delslice__(self, *args): return _libenv.ListVal___delslice__(self, *args)
    def __delitem__(self, *args): return _libenv.ListVal___delitem__(self, *args)
    def __getitem__(self, *args): return _libenv.ListVal___getitem__(self, *args)
    def __setitem__(self, *args): return _libenv.ListVal___setitem__(self, *args)
    def append(self, *args): return _libenv.ListVal_append(self, *args)
    def empty(self): return _libenv.ListVal_empty(self)
    def size(self): return _libenv.ListVal_size(self)
    def clear(self): return _libenv.ListVal_clear(self)
    def swap(self, *args): return _libenv.ListVal_swap(self, *args)
    def get_allocator(self): return _libenv.ListVal_get_allocator(self)
    def begin(self): return _libenv.ListVal_begin(self)
    def end(self): return _libenv.ListVal_end(self)
    def rbegin(self): return _libenv.ListVal_rbegin(self)
    def rend(self): return _libenv.ListVal_rend(self)
    def pop_back(self): return _libenv.ListVal_pop_back(self)
    def erase(self, *args): return _libenv.ListVal_erase(self, *args)
    def __init__(self, *args): 
        this = _libenv.new_ListVal(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _libenv.ListVal_push_back(self, *args)
    def front(self): return _libenv.ListVal_front(self)
    def back(self): return _libenv.ListVal_back(self)
    def assign(self, *args): return _libenv.ListVal_assign(self, *args)
    def resize(self, *args): return _libenv.ListVal_resize(self, *args)
    def insert(self, *args): return _libenv.ListVal_insert(self, *args)
    def pop_front(self): return _libenv.ListVal_pop_front(self)
    def push_front(self, *args): return _libenv.ListVal_push_front(self, *args)
    def remove(self, *args): return _libenv.ListVal_remove(self, *args)
    def unique(self): return _libenv.ListVal_unique(self)
    def reverse(self): return _libenv.ListVal_reverse(self)
    def sort(self): return _libenv.ListVal_sort(self)
    def merge(self, *args): return _libenv.ListVal_merge(self, *args)
    __swig_destroy__ = _libenv.delete_ListVal
    __del__ = lambda self : None;
ListVal_swigregister = _libenv.ListVal_swigregister
ListVal_swigregister(ListVal)

class MapKey(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MapKey, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MapKey, name)
    __repr__ = _swig_repr
    def iterator(self): return _libenv.MapKey_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _libenv.MapKey___nonzero__(self)
    def __bool__(self): return _libenv.MapKey___bool__(self)
    def __len__(self): return _libenv.MapKey___len__(self)
    def __getitem__(self, *args): return _libenv.MapKey___getitem__(self, *args)
    def __delitem__(self, *args): return _libenv.MapKey___delitem__(self, *args)
    def has_key(self, *args): return _libenv.MapKey_has_key(self, *args)
    def keys(self): return _libenv.MapKey_keys(self)
    def values(self): return _libenv.MapKey_values(self)
    def items(self): return _libenv.MapKey_items(self)
    def __contains__(self, *args): return _libenv.MapKey___contains__(self, *args)
    def key_iterator(self): return _libenv.MapKey_key_iterator(self)
    def value_iterator(self): return _libenv.MapKey_value_iterator(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __setitem__(self, *args): return _libenv.MapKey___setitem__(self, *args)
    def __init__(self, *args): 
        this = _libenv.new_MapKey(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _libenv.MapKey_empty(self)
    def size(self): return _libenv.MapKey_size(self)
    def clear(self): return _libenv.MapKey_clear(self)
    def swap(self, *args): return _libenv.MapKey_swap(self, *args)
    def get_allocator(self): return _libenv.MapKey_get_allocator(self)
    def begin(self): return _libenv.MapKey_begin(self)
    def end(self): return _libenv.MapKey_end(self)
    def rbegin(self): return _libenv.MapKey_rbegin(self)
    def rend(self): return _libenv.MapKey_rend(self)
    def count(self, *args): return _libenv.MapKey_count(self, *args)
    def erase(self, *args): return _libenv.MapKey_erase(self, *args)
    def find(self, *args): return _libenv.MapKey_find(self, *args)
    def lower_bound(self, *args): return _libenv.MapKey_lower_bound(self, *args)
    def upper_bound(self, *args): return _libenv.MapKey_upper_bound(self, *args)
    __swig_destroy__ = _libenv.delete_MapKey
    __del__ = lambda self : None;
MapKey_swigregister = _libenv.MapKey_swigregister
MapKey_swigregister(MapKey)



