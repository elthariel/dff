# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.38
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        try:
            fp, pathname, description = imp.find_module('_libcmodule', [dirname(__file__)])
            _mod = imp.load_module('_libcmodule', fp, pathname, description)
        finally:
            if fp is not None: fp.close()
        return _mod
    _libcmodule = swig_import_helper()
    del swig_import_helper
else:
    import _libcmodule
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _libcmodule.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _libcmodule.SwigPyIterator_value(self)
    def incr(self, n = 1): return _libcmodule.SwigPyIterator_incr(self, n)
    def decr(self, n = 1): return _libcmodule.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _libcmodule.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _libcmodule.SwigPyIterator_equal(self, *args)
    def copy(self): return _libcmodule.SwigPyIterator_copy(self)
    def next(self): return _libcmodule.SwigPyIterator_next(self)
    def __next__(self): return _libcmodule.SwigPyIterator___next__(self)
    def previous(self): return _libcmodule.SwigPyIterator_previous(self)
    def advance(self, *args): return _libcmodule.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _libcmodule.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _libcmodule.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _libcmodule.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _libcmodule.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _libcmodule.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _libcmodule.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _libcmodule.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class CModule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CModule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CModule, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _libcmodule.new_CModule(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libcmodule.delete_CModule
    __del__ = lambda self : None;
    __swig_setmethods__["fcreate"] = _libcmodule.CModule_fcreate_set
    __swig_getmethods__["fcreate"] = _libcmodule.CModule_fcreate_get
    if _newclass:fcreate = _swig_property(_libcmodule.CModule_fcreate_get, _libcmodule.CModule_fcreate_set)
    __swig_setmethods__["conf"] = _libcmodule.CModule_conf_set
    __swig_getmethods__["conf"] = _libcmodule.CModule_conf_get
    if _newclass:conf = _swig_property(_libcmodule.CModule_conf_get, _libcmodule.CModule_conf_set)
    __swig_setmethods__["tags"] = _libcmodule.CModule_tags_set
    __swig_getmethods__["tags"] = _libcmodule.CModule_tags_get
    if _newclass:tags = _swig_property(_libcmodule.CModule_tags_get, _libcmodule.CModule_tags_set)
    __swig_setmethods__["flags"] = _libcmodule.CModule_flags_set
    __swig_getmethods__["flags"] = _libcmodule.CModule_flags_get
    if _newclass:flags = _swig_property(_libcmodule.CModule_flags_get, _libcmodule.CModule_flags_set)
    __swig_setmethods__["name"] = _libcmodule.CModule_name_set
    __swig_getmethods__["name"] = _libcmodule.CModule_name_get
    if _newclass:name = _swig_property(_libcmodule.CModule_name_get, _libcmodule.CModule_name_set)
    __swig_setmethods__["handle"] = _libcmodule.CModule_handle_set
    __swig_getmethods__["handle"] = _libcmodule.CModule_handle_get
    if _newclass:handle = _swig_property(_libcmodule.CModule_handle_get, _libcmodule.CModule_handle_set)
    def getfso(self): return _libcmodule.CModule_getfso(self)
CModule_swigregister = _libcmodule.CModule_swigregister
CModule_swigregister(CModule)

class FDInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FDInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FDInfo, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _libcmodule.new_FDInfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["current"] = _libcmodule.FDInfo_current_set
    __swig_getmethods__["current"] = _libcmodule.FDInfo_current_get
    if _newclass:current = _swig_property(_libcmodule.FDInfo_current_get, _libcmodule.FDInfo_current_set)
    __swig_setmethods__["fdata"] = _libcmodule.FDInfo_fdata_set
    __swig_getmethods__["fdata"] = _libcmodule.FDInfo_fdata_get
    if _newclass:fdata = _swig_property(_libcmodule.FDInfo_fdata_get, _libcmodule.FDInfo_fdata_set)
    __swig_destroy__ = _libcmodule.delete_FDInfo
    __del__ = lambda self : None;
FDInfo_swigregister = _libcmodule.FDInfo_swigregister
FDInfo_swigregister(FDInfo)

class fdmanager(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, fdmanager, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, fdmanager, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fdallocated"] = _libcmodule.fdmanager_fdallocated_set
    __swig_getmethods__["fdallocated"] = _libcmodule.fdmanager_fdallocated_get
    if _newclass:fdallocated = _swig_property(_libcmodule.fdmanager_fdallocated_get, _libcmodule.fdmanager_fdallocated_set)
    def InitFDM(self): return _libcmodule.fdmanager_InitFDM(self)
    def DeleteFDM(self): return _libcmodule.fdmanager_DeleteFDM(self)
    def ClearFD(self, *args): return _libcmodule.fdmanager_ClearFD(self, *args)
    def UpdateFD(self, *args): return _libcmodule.fdmanager_UpdateFD(self, *args)
    def AllocFD(self, *args): return _libcmodule.fdmanager_AllocFD(self, *args)
    def GetFDInfo(self, *args): return _libcmodule.fdmanager_GetFDInfo(self, *args)
    def __init__(self): 
        this = _libcmodule.new_fdmanager()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libcmodule.delete_fdmanager
    __del__ = lambda self : None;
fdmanager_swigregister = _libcmodule.fdmanager_swigregister
fdmanager_swigregister(fdmanager)

class listCModule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, listCModule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, listCModule, name)
    __repr__ = _swig_repr
    def iterator(self): return _libcmodule.listCModule_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _libcmodule.listCModule___nonzero__(self)
    def __bool__(self): return _libcmodule.listCModule___bool__(self)
    def __len__(self): return _libcmodule.listCModule___len__(self)
    def pop(self): return _libcmodule.listCModule_pop(self)
    def __getslice__(self, *args): return _libcmodule.listCModule___getslice__(self, *args)
    def __setslice__(self, *args): return _libcmodule.listCModule___setslice__(self, *args)
    def __delslice__(self, *args): return _libcmodule.listCModule___delslice__(self, *args)
    def __delitem__(self, *args): return _libcmodule.listCModule___delitem__(self, *args)
    def __getitem__(self, *args): return _libcmodule.listCModule___getitem__(self, *args)
    def __setitem__(self, *args): return _libcmodule.listCModule___setitem__(self, *args)
    def append(self, *args): return _libcmodule.listCModule_append(self, *args)
    def empty(self): return _libcmodule.listCModule_empty(self)
    def size(self): return _libcmodule.listCModule_size(self)
    def clear(self): return _libcmodule.listCModule_clear(self)
    def swap(self, *args): return _libcmodule.listCModule_swap(self, *args)
    def get_allocator(self): return _libcmodule.listCModule_get_allocator(self)
    def begin(self): return _libcmodule.listCModule_begin(self)
    def end(self): return _libcmodule.listCModule_end(self)
    def rbegin(self): return _libcmodule.listCModule_rbegin(self)
    def rend(self): return _libcmodule.listCModule_rend(self)
    def pop_back(self): return _libcmodule.listCModule_pop_back(self)
    def erase(self, *args): return _libcmodule.listCModule_erase(self, *args)
    def __init__(self, *args): 
        this = _libcmodule.new_listCModule(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _libcmodule.listCModule_push_back(self, *args)
    def front(self): return _libcmodule.listCModule_front(self)
    def back(self): return _libcmodule.listCModule_back(self)
    def assign(self, *args): return _libcmodule.listCModule_assign(self, *args)
    def resize(self, *args): return _libcmodule.listCModule_resize(self, *args)
    def insert(self, *args): return _libcmodule.listCModule_insert(self, *args)
    def pop_front(self): return _libcmodule.listCModule_pop_front(self)
    def push_front(self, *args): return _libcmodule.listCModule_push_front(self, *args)
    def remove(self, *args): return _libcmodule.listCModule_remove(self, *args)
    def unique(self): return _libcmodule.listCModule_unique(self)
    def reverse(self): return _libcmodule.listCModule_reverse(self)
    def sort(self): return _libcmodule.listCModule_sort(self)
    def merge(self, *args): return _libcmodule.listCModule_merge(self, *args)
    __swig_destroy__ = _libcmodule.delete_listCModule
    __del__ = lambda self : None;
listCModule_swigregister = _libcmodule.listCModule_swigregister
listCModule_swigregister(listCModule)

class mapcmodule(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, mapcmodule, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, mapcmodule, name)
    __repr__ = _swig_repr
    def iterator(self): return _libcmodule.mapcmodule_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _libcmodule.mapcmodule___nonzero__(self)
    def __bool__(self): return _libcmodule.mapcmodule___bool__(self)
    def __len__(self): return _libcmodule.mapcmodule___len__(self)
    def __getitem__(self, *args): return _libcmodule.mapcmodule___getitem__(self, *args)
    def __delitem__(self, *args): return _libcmodule.mapcmodule___delitem__(self, *args)
    def has_key(self, *args): return _libcmodule.mapcmodule_has_key(self, *args)
    def keys(self): return _libcmodule.mapcmodule_keys(self)
    def values(self): return _libcmodule.mapcmodule_values(self)
    def items(self): return _libcmodule.mapcmodule_items(self)
    def __contains__(self, *args): return _libcmodule.mapcmodule___contains__(self, *args)
    def key_iterator(self): return _libcmodule.mapcmodule_key_iterator(self)
    def value_iterator(self): return _libcmodule.mapcmodule_value_iterator(self)
    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __setitem__(self, *args): return _libcmodule.mapcmodule___setitem__(self, *args)
    def __init__(self, *args): 
        this = _libcmodule.new_mapcmodule(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self): return _libcmodule.mapcmodule_empty(self)
    def size(self): return _libcmodule.mapcmodule_size(self)
    def clear(self): return _libcmodule.mapcmodule_clear(self)
    def swap(self, *args): return _libcmodule.mapcmodule_swap(self, *args)
    def get_allocator(self): return _libcmodule.mapcmodule_get_allocator(self)
    def begin(self): return _libcmodule.mapcmodule_begin(self)
    def end(self): return _libcmodule.mapcmodule_end(self)
    def rbegin(self): return _libcmodule.mapcmodule_rbegin(self)
    def rend(self): return _libcmodule.mapcmodule_rend(self)
    def count(self, *args): return _libcmodule.mapcmodule_count(self, *args)
    def erase(self, *args): return _libcmodule.mapcmodule_erase(self, *args)
    def find(self, *args): return _libcmodule.mapcmodule_find(self, *args)
    def lower_bound(self, *args): return _libcmodule.mapcmodule_lower_bound(self, *args)
    def upper_bound(self, *args): return _libcmodule.mapcmodule_upper_bound(self, *args)
    __swig_destroy__ = _libcmodule.delete_mapcmodule
    __del__ = lambda self : None;
mapcmodule_swigregister = _libcmodule.mapcmodule_swigregister
mapcmodule_swigregister(mapcmodule)

class listString(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, listString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, listString, name)
    __repr__ = _swig_repr
    def iterator(self): return _libcmodule.listString_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _libcmodule.listString___nonzero__(self)
    def __bool__(self): return _libcmodule.listString___bool__(self)
    def __len__(self): return _libcmodule.listString___len__(self)
    def pop(self): return _libcmodule.listString_pop(self)
    def __getslice__(self, *args): return _libcmodule.listString___getslice__(self, *args)
    def __setslice__(self, *args): return _libcmodule.listString___setslice__(self, *args)
    def __delslice__(self, *args): return _libcmodule.listString___delslice__(self, *args)
    def __delitem__(self, *args): return _libcmodule.listString___delitem__(self, *args)
    def __getitem__(self, *args): return _libcmodule.listString___getitem__(self, *args)
    def __setitem__(self, *args): return _libcmodule.listString___setitem__(self, *args)
    def append(self, *args): return _libcmodule.listString_append(self, *args)
    def empty(self): return _libcmodule.listString_empty(self)
    def size(self): return _libcmodule.listString_size(self)
    def clear(self): return _libcmodule.listString_clear(self)
    def swap(self, *args): return _libcmodule.listString_swap(self, *args)
    def get_allocator(self): return _libcmodule.listString_get_allocator(self)
    def begin(self): return _libcmodule.listString_begin(self)
    def end(self): return _libcmodule.listString_end(self)
    def rbegin(self): return _libcmodule.listString_rbegin(self)
    def rend(self): return _libcmodule.listString_rend(self)
    def pop_back(self): return _libcmodule.listString_pop_back(self)
    def erase(self, *args): return _libcmodule.listString_erase(self, *args)
    def __init__(self, *args): 
        this = _libcmodule.new_listString(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _libcmodule.listString_push_back(self, *args)
    def front(self): return _libcmodule.listString_front(self)
    def back(self): return _libcmodule.listString_back(self)
    def assign(self, *args): return _libcmodule.listString_assign(self, *args)
    def resize(self, *args): return _libcmodule.listString_resize(self, *args)
    def insert(self, *args): return _libcmodule.listString_insert(self, *args)
    def pop_front(self): return _libcmodule.listString_pop_front(self)
    def push_front(self, *args): return _libcmodule.listString_push_front(self, *args)
    def reverse(self): return _libcmodule.listString_reverse(self)
    __swig_destroy__ = _libcmodule.delete_listString
    __del__ = lambda self : None;
listString_swigregister = _libcmodule.listString_swigregister
listString_swigregister(listString)



